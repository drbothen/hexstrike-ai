"""
Comprehensive exploitation and analysis tool endpoint handlers.

This module handles comprehensive exploitation and analysis tool endpoints.
"""

from typing import Dict, Any
from flask import request, jsonify
import logging
from ...services.tool_execution_service import ToolExecutionService

logger = logging.getLogger(__name__)

class ComprehensiveExploitToolEndpoints:
    """Comprehensive exploitation and analysis tool endpoint handlers"""
    
    def __init__(self):
        self.execution_service = ToolExecutionService()
    
    def _execute_tool_endpoint(self, tool_name: str) -> Dict[str, Any]:
        """Generic tool execution endpoint handler"""
        try:
            data = request.get_json()
            if not data:
                return jsonify({"error": "Request body must contain valid JSON"}), 400
            
            result = self.execution_service.execute_tool(tool_name, data)
            
            if result.success:
                return jsonify({
                    "success": True,
                    "tool": tool_name,
                    "output": result.stdout,
                    "execution_time": result.execution_time,
                    "command": ""
                })
            else:
                return jsonify({
                    "success": False,
                    "error": result.stderr,
                    "tool": tool_name
                }), 500
                
        except Exception as e:
            logger.error(f"ðŸ’¥ Error in {tool_name} endpoint: {str(e)}")
            return jsonify({"error": f"Server error: {str(e)}"}), 500
    
    def hashcat(self):
        """Execute hashcat password cracker"""
        return self._execute_tool_endpoint("hashcat")
    
    def john(self):
        """Execute john the ripper"""
        return self._execute_tool_endpoint("john")
    
    def hydra(self):
        """Execute hydra brute force tool"""
        return self._execute_tool_endpoint("hydra")
    
    def medusa(self):
        """Execute medusa brute force tool"""
        return self._execute_tool_endpoint("medusa")
    
    def ghidra(self):
        """Execute ghidra analysis"""
        return self._execute_tool_endpoint("ghidra")
    
    def radare2(self):
        """Execute radare2"""
        return self._execute_tool_endpoint("radare2")
    
    def binwalk(self):
        """Execute binwalk"""
        return self._execute_tool_endpoint("binwalk")
    
    def strings(self):
        """Execute strings utility"""
        return self._execute_tool_endpoint("strings")
    
    def objdump(self):
        """Execute objdump"""
        return self._execute_tool_endpoint("objdump")
    
    def gdb(self):
        """Execute gdb debugger"""
        return self._execute_tool_endpoint("gdb")
    
    def metasploit(self):
        """Execute metasploit"""
        return self._execute_tool_endpoint("metasploit")
    
    def searchsploit(self):
        """Execute searchsploit"""
        return self._execute_tool_endpoint("searchsploit")
    
    def exploit_db(self):
        """Execute exploit-db search"""
        return self._execute_tool_endpoint("exploit-db")
    
    def setoolkit(self):
        """Execute social engineering toolkit"""
        return self._execute_tool_endpoint("setoolkit")
    
    def gophish(self):
        """Execute gophish phishing framework"""
        return self._execute_tool_endpoint("gophish")
    
    def mobsf(self):
        """Execute mobile security framework"""
        return self._execute_tool_endpoint("mobsf")
    
    def frida(self):
        """Execute frida dynamic analysis"""
        return self._execute_tool_endpoint("frida")
    
    def objection(self):
        """Execute objection mobile testing"""
        return self._execute_tool_endpoint("objection")
    
    def powershell_empire(self):
        """Execute powershell empire"""
        return self._execute_tool_endpoint("powershell-empire")
    
    def covenant(self):
        """Execute covenant C2"""
        return self._execute_tool_endpoint("covenant")
    
    def cobalt_strike(self):
        """Execute cobalt strike"""
        return self._execute_tool_endpoint("cobalt-strike")
